{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows\\\\sInvSyst\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n\n  // On mount, check both localStorage and sessionStorage for token\n  useEffect(() => {\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        if (Date.now() < decoded.exp * 1000) {\n          setUser(decoded);\n        } else {\n          localStorage.removeItem('token');\n          sessionStorage.removeItem('token');\n          setUser(null);\n        }\n      } catch {\n        localStorage.removeItem('token');\n        sessionStorage.removeItem('token');\n        setUser(null);\n      }\n    }\n  }, []);\n\n  // Login function\n  const login = async (username, password, remember) => {\n    try {\n      const res = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (res.ok) {\n        const data = await res.json();\n        // Store token in localStorage or sessionStorage based on \"Remember Me\"\n        if (remember) {\n          localStorage.setItem('token', data.token);\n          sessionStorage.removeItem('token');\n        } else {\n          sessionStorage.setItem('token', data.token);\n          localStorage.removeItem('token');\n        }\n        const decoded = jwtDecode(data.token);\n        setUser(decoded);\n        return true;\n      }\n      return false;\n    } catch {\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('token');\n    setUser(null);\n  };\n  const checkToken = () => {\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (!token) {\n      setUser(null);\n      return false;\n    }\n    try {\n      const {\n        exp\n      } = jwtDecode(token);\n      if (Date.now() >= exp * 1000) {\n        localStorage.removeItem('token');\n        sessionStorage.removeItem('token');\n        setUser(null);\n        return false;\n      }\n      return true;\n    } catch {\n      localStorage.removeItem('token');\n      sessionStorage.removeItem('token');\n      setUser(null);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      checkToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","token","localStorage","getItem","sessionStorage","decoded","Date","now","exp","removeItem","login","username","password","remember","res","fetch","method","headers","body","JSON","stringify","ok","data","json","setItem","logout","checkToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Windows/sInvSyst/client/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // On mount, check both localStorage and sessionStorage for token\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const decoded = jwtDecode(token);\r\n        if (Date.now() < decoded.exp * 1000) {\r\n          setUser(decoded);\r\n        } else {\r\n          localStorage.removeItem('token');\r\n          sessionStorage.removeItem('token');\r\n          setUser(null);\r\n        }\r\n      } catch {\r\n        localStorage.removeItem('token');\r\n        sessionStorage.removeItem('token');\r\n        setUser(null);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password, remember) => {\r\n    try {\r\n      const res = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n      if (res.ok) {\r\n        const data = await res.json();\r\n        // Store token in localStorage or sessionStorage based on \"Remember Me\"\r\n        if (remember) {\r\n          localStorage.setItem('token', data.token);\r\n          sessionStorage.removeItem('token');\r\n        } else {\r\n          sessionStorage.setItem('token', data.token);\r\n          localStorage.removeItem('token');\r\n        }\r\n        const decoded = jwtDecode(data.token);\r\n        setUser(decoded);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    sessionStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  const checkToken = () => {\r\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n    if (!token) {\r\n      setUser(null);\r\n      return false;\r\n    }\r\n    try {\r\n      const { exp } = jwtDecode(token);\r\n      if (Date.now() >= exp * 1000) {\r\n        localStorage.removeItem('token');\r\n        sessionStorage.removeItem('token');\r\n        setUser(null);\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch {\r\n      localStorage.removeItem('token');\r\n      sessionStorage.removeItem('token');\r\n      setUser(null);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, checkToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}